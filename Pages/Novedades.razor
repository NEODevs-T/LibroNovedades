    
@inject IDataArea DataArea;
@inject IDataCentro DataCentro;
@inject IDataLinea DataLinea;
@inject IDataAPI DataAPI;
@inject IDataLibroNov DataLibroNov;
@inject IDataTiParTP DataTiParTP;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager

<PageTitle>Formato</PageTitle>


@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Libro de Novedades</h1>
        </BSRow>
    </BSContainer>
    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
        <BSAlert IsOpen="_showTooltip" style="height:55px;" class="alertaInfo"  @ref="_alertRef" Dismissed="Dismissed">
            <h5>@mensaje</h5>
        </BSAlert>
        <BSCard CardType="CardType.Body">
            @if(IsAcceso){
                <BSCard CardType="CardType.Text">
                    @if(dataNove.IdParada == "0"  || dataNove.IdParada == "-1"){
                        <BSRow> 
                            @if(dataNove.IdParada == "-1"){
                                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Centro</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="dataNove.IdAreaCar" @onchange="BuscarLinea">
                                            @if(ListaCentro != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in ListaCentro)
                                                {
                                                    <option value="@item.IdCentro">@item.Cnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Linea</BSLabel>
                                        <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdLinea" @onchange="BuscarTiempoPerdido">
                                            @if (dataNove.IdAreaCar != 0)
                                            {   
                                                @if(ListaLinea != null){
                                                    <option value="0">Seleccione un Linea</option>
                                                    @foreach (var item in ListaLinea)
                                                    {
                                                        <option value="@item.IdLinea">@item.Lnom</option>
                                                    }
                                                }else{
                                                    <option value="0">Cargando...</option>
                                                }
                                            }else{
                                                <option value="0">Seleccione un Centro</option>
                                            }
                                        </BSInput>
                            </BSCol>
                            <BSCol Position="Position.Relative" Align="Align.End"  AlignRow="OTRAlignRow" Place ColumnMedium="4">
                                @if(dataNove.IdLinea != 0){
                                    <BSButton class="buttonFormularioOK" style="margin-right: 10px;"  @onclick=SinPerdida>Sin Perdida De tiempo</BSButton>
                                }
                                <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabled"  @onclick=atras1>Atras</BSButton>
                            </BSCol>
                        </BSRow>  
                        <br>
                        <br>
                        @if(paradasBandera){
                                        <BSRow>
                                            <BSCol Position="Position.Relative" Place ColumnMedium="5">
                                                <BSLabel class="labelFormularioGrande">Tiempo Perdido (min) </BSLabel>
                                                <BSInput InputType="InputType.Number" @bind-Value="tiempoPerdido"  rows="1" ></BSInput>
                                            </BSCol>
                                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                                <BSLabel class="labelFormulario">Causa</BSLabel>
                                                <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdTipoNove">
                                                    @if(listaTiposNovedad != null){
                                                        <option value="0">Seleccione</option>
                                                        @foreach (var item in listaTiposNovedad)
                                                        {
                                                            <option value="@item.IdTiParTp">@item.Tpnombre</option>
                                                        }
                                                    }else{
                                                        <option value="0">Cargando...</option>
                                                    }
                                                </BSInput>
                                            </BSCol>
                                            <BSCol Position="Position.Relative" Class="AbajoBoton" Place ColumnMedium="3">
                                                <BSButton class="buttonFormularioOK" @onclick="eleccionSinGespline">Seleccionar</BSButton>
                                            </BSCol>
                                        </BSRow>
                        }else{
                            <BSTable IsResponsive="true" IsStriped="true">
                                <BSTHead>
                                    <BSTR class="cabeceraTabla">
                                        <BSTD>#</BSTD>
                                        <BSTD>Area</BSTD>
                                        <BSTD>Descripcion</BSTD>
                                        <BSTD>Tiempo</BSTD>
                                        <BSTD>Seleccionar</BSTD>
                                    </BSTR>
                                </BSTHead>
                                <BSTBody class="cuerpoTabla">
                                    @if(paradas == null){
                                        <BSTR>
                                            <BSTD ColSpan="5">Coloque una Linea</BSTD>
                                        </BSTR>
                                    }else{
                                        @foreach (var item in index)
                                        {
                                            <BSTR>
                                                <BSTD>@item</BSTD>
                                                <BSTD>@paradas[4][item]</BSTD>
                                                <BSTD>@paradas[2][item]</BSTD>
                                                <BSTD>@paradas[3][item].Substring(0,5).Replace(".",",")</BSTD>
                                                <BSTD><BSButton id="@item"  class="buttonFormularioOK" @onclick="@(e => eleccion(item))">Seleccionar</BSButton></BSTD>
                                            </BSTR>
                                        }
                                    }
                                </BSTBody>
                            </BSTable>
                        }
                    }else{
                        <BSForm Model="dataNove" IsRow="true" Gutters="Gutters.Medium" OnSubmit="OK">
                            <DataAnnotationsValidator />
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Centro</BSLabel>
                                    <BSInput IsDisabled="true" InputType="InputType.Select" @bind-Value="dataNove.IdAreaCar" @onchange="BuscarLinea">
                                        @if(ListaCentro != null){
                                            <option value="0">Seleccione un Centro</option>
                                            @foreach (var item in ListaCentro)
                                            {
                                                <option value="@item.IdCentro">@item.Cnom</option>
                                            }
                                        }else{
                                            <option value="0">Cargando...</option>
                                        }
                                    </BSInput>
                            <BSFeedback For="@(() => dataNove.IdAreaCar)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Linea</BSLabel>
                                    <BSInput InputType="InputType.Select" IsDisabled="true" @bind-Value="dataNove.IdLinea" @onchange="BuscarTiempoPerdido">
                                        @if (dataNove.IdAreaCar != 0)
                                        {   
                                            @if(ListaLinea != null){
                                                <option value="0">Seleccione un Linea</option>
                                                @foreach (var item in ListaLinea)
                                                {
                                                    <option value="@item.IdLinea">@item.Lnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        }else{
                                            <option value="0">Seleccione un Centro</option>
                                        }
                                    </BSInput>
                                    <BSFeedback For="@(() => dataNove.IdLinea)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Grupo</BSLabel>
                                    <BSInput IsDisabled="true"  InputType="InputType.Select" @bind-Value="dataNove.Lngrupo">
                                        <option value="0">Seleccionar Grupo</option>
                                        <option value="A">Grupo A</option>
                                        <option value="B">Grupo B</option>
                                        <option value="C">Grupo C</option>
                                        <option value="D">Grupo D</option>
                                    </BSInput>
                                    <BSFeedback For="@(() => dataNove.Lngrupo)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Turno</BSLabel>
                                    <BSInput  IsDisabled="true" InputType="InputType.Select" @bind-Value="dataNove.Lnturno">
                                        <option value="0">Seleccionar Grupo</option>
                                        <option value="1">1er turno</option>
                                        <option value="2">2do truno</option>
                                    </BSInput>
                                    <BSFeedback For="@(() => dataNove.Lnturno)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="5">
                                    <BSLabel class="labelFormularioGrande">Codigo de Equipo</BSLabel>
                                    <BSInput InputType="InputType.Text" rows="1" @bind-Value="dataNove.IdEquipo"></BSInput>
                                    <BSFeedback For="@(() => dataNove.IdEquipo)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" style="display: flex;justify-content: center;align-items: end;" Place ColumnMedium="3">
                                    <BSButton class="buttonFormularioOK" style="he" @onclick=IdMaquina>Cargar al OFIC</BSButton>
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="12">
                                    <BSLabel class="labelFormulario">Discrepancia</BSLabel>
                                    <BSInput InputType="InputType.TextArea" rows="1" @bind-Value="dataNove.Lndiscrepa"></BSInput>
                                    <BSFeedback For="@(() => dataNove.Lndiscrepa)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="12">
                                    <BSLabel class="labelFormulario">Observación</BSLabel>
                                    <BSInput InputType="InputType.TextArea" rows="1" @bind-Value="dataNove.Lnobserv"></BSInput>
                                    <BSFeedback For="@(() => dataNove.Lnobserv)"/> 
                            </BSCol>
                            <BSCol Column="12">
                                    <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" IsSubmit="true">Registrar</BSButton>
                                    <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabled" @onclick=atras2 IsReset="true" >Atras</BSButton> 
                            </BSCol>
                        </BSForm>
                    }
                </BSCard>
            }
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}
@code{
    private string? mensaje { get; set;}
    private LibroNove dataNove  { get; set;}

    private Dictionary<string,string> usuario { get; set;}
    private TiParTp tipoParada  { get; set;}
    private List<Centro> ListaCentro { get; set;}
    private List<Linea> ListaLinea { get; set;}
    private List<LinAre> ListaArea { get; set;}
    private BSAlert _alertRef;
    private double tiempoPerdido { get; set;}
    private bool _showTooltip;
    private int idLinea { get; set;}
    
    private bool _buttonDisabled = true;

    private List<List<string>> paradas;
    //public HttpClient cliente { get; set;}
    private List<int> index  { get; set;}

    private List<LibroNove> listaNove { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private ComponentBase contenedor { get; set;}
    private InputText inputTextReferencia {get; set;}
    private bool isDisabled  { get; set;}
    private bool paradasBandera {get; set;}
    private bool isDisabledArea { get; set;}
    private bool isDisabledLinea { get; set;}
    private bool bandera  { get; set;}
    private List<string> listaTurnoYGrupo { get; set;}
    private bool IsSinTiempo { get; set;}
    private bool IsCargado  { get; set;}
    private Dictionary<string,string>? usuarioCache {get; set;}
    private bool IsAcceso  { get; set;}
    
    protected override async Task  OnInitializedAsync()
    {
        IsCargado = false;
        IsAcceso = false;
        mensaje = "Registre una Novedad";
        dataNove = new LibroNove();
        ListaCentro = await DataCentro.ObtenerTodosLosCentro();
        listaTurnoYGrupo = await DataAPI.ObtenerTurnoYGrupo();
        listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();
        dataNove.Lnturno = listaTurnoYGrupo[0];
        dataNove.Lngrupo = listaTurnoYGrupo[1];
        //ListaArea = new List<LinAre>();
        //ListaLinea = new List<Linea>();
        //paradas = new List<List<string>>();
        //index = new List<int>();
        isDisabled = false;
        paradasBandera = false;
        tiempoPerdido = 0;
    }
    protected async Task OK(EditContext e){
        isDisabled = true;
        dataNove.Lnfecha = DateTime.Now;
        if (e.Validate())
        {
            try
            {
                dataNove.LnfichaRes = dataNove.LnfichaRes.ToUpper();
                dataNove.IdEquipo = dataNove.IdEquipo.Trim();
                dataNove.Lnobserv = dataNove.Lnobserv.Trim();
                dataNove.Lndiscrepa = dataNove.Lndiscrepa.Trim();
                dataNove.LntiePerMi = Math.Round(dataNove.LntiePerMi,5);
                bandera = await DataLibroNov.InsertarRegistro(dataNove);
                if(bandera){
                    mensaje = "Guardado Exitosamente";
                    int d1 = dataNove.IdAreaCar;
                    int d2 =  dataNove.IdLinea;
                    int d3 = -1;
                    if(dataNove.IdParada != null){
                        d3 = paradas[0].FindIndex(d => d.Contains(dataNove.IdParada.ToString().Substring(1)));
                    }
                    string d4 = dataNove.LnfichaRes;
                    string d5 = dataNove.IdMaquina;
                    if(d3 != -1){
                        paradas[0].RemoveAt(d3);
                        paradas[1].RemoveAt(d3);
                        paradas[2].RemoveAt(d3);
                        paradas[3].RemoveAt(d3);
                        paradas[4].RemoveAt(d3);
                        paradas[5].RemoveAt(d3);
                    }
                    dataNove = new LibroNove();
                    dataNove.IdAreaCar = d1;
                    dataNove.IdLinea = d2;
                    dataNove.LnfichaRes = d4;
                    dataNove.IdMaquina = d5;
                    dataNove.IdParada = "0";
                    dataNove.Lnturno = listaTurnoYGrupo[0];
                    dataNove.Lngrupo = listaTurnoYGrupo[1];
                    index = new List<int>(paradas[0].Count());
                    for (int i = 0; i < index.Capacity; i++){  index.Add(i); }
                }else{
                    mensaje = "Error. Intente de nuevo";
                }
            }
            catch (Microsoft.EntityFrameworkCore.DbUpdateException a)
            {
                mensaje = "Ese elemento ya fue registrado. Por favor seleccione otra causa";
                dataNove = new LibroNove();
                dataNove.Lnturno = listaTurnoYGrupo[0];
                dataNove.Lngrupo = listaTurnoYGrupo[1];
                usuario = null;
            }
            catch(Exception ex){
                mensaje = ex.Message;
            }
        }
        isDisabled = false;
        _showTooltip = true;
    }

    protected async Task BuscarLinea(ChangeEventArgs e){
        try{
            dataNove.IdAreaCar = Int32.Parse(e.Value.ToString());
            if(dataNove.IdAreaCar != 0){
                ListaLinea = await DataLinea.ObtenerLasLineasPorCentro(dataNove.IdAreaCar);
            }else{
                dataNove.IdLinea = 0;
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }
    protected async Task BuscarLinea(int dato){
        try{
            dataNove.IdAreaCar = Int32.Parse(dato.ToString());
            if(dataNove.IdAreaCar != 0){
                ListaLinea = await DataLinea.ObtenerLasLineasPorCentro(dataNove.IdAreaCar);
            }else{
                dataNove.IdLinea = 0;
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task BuscarFicha(){
        try{
            dataNove.IdParada = "0";
            usuario = await DataAPI.obtenerUsuario(dataNove.LnfichaRes);
            string departamenteo = usuario["departamento"];
            isDisabledArea =true;
            isDisabledLinea = true;
            if(departamenteo.Contains("CONVERSION")){
                dataNove.IdAreaCar = 1;
            }else if(departamenteo.Contains("MOLINOS")){
                dataNove.IdAreaCar = 2;
            }else if(departamenteo.Contains("MEJORA CONTINUA")){
                dataNove.IdAreaCar = 0;
                isDisabledArea = false;
                dataNove.IdParada = "-1";
                isDisabledLinea = false;
            }else{
                usuario = null;
                mensaje = "No posee autorización para ingresar a este módulo";
            }
            await BuscarLinea(dataNove.IdAreaCar);
        }catch(System.NullReferenceException){
            usuario = null;
            mensaje = "La ficha ingresada no existe";
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    protected async Task BuscarTiempoPerdido(ChangeEventArgs e){
        try{
            dataNove.IdLinea = int.Parse(e.Value.ToString());
            Linea linea =  ListaLinea.Where(l => l.IdLinea == int.Parse(e.Value.ToString())).First();
            dataNove.IdMaquina = linea.Lofic;
            listaNove = await DataLibroNov.RegistroDeHoyPorLinea(dataNove.IdLinea);
            paradas = await DataAPI.obtenerParadasActualesturnoPorLinea(linea.LcenCos,listaNove);
            if(paradas.Count != 0){
                if(paradas[0].Count == 0){
                    paradasBandera = true;
                    index = new List<int>();
                }else{
                    paradasBandera = false;
                    index = new List<int>(paradas[0].Count());
                    for (int i = 0; i < index.Capacity; i++){  index.Add(i); }
                }
            }else{
                paradasBandera = true;
                index = new List<int>();
            }
        }catch(Exception ex){
            mensaje = ex.Message;
        }
    }

    public async Task eleccion(int item){
        //? al agregar 1 indica que son datos del Gespline
        //string a = await ReturnArrayAsync(item.ToString());
        try{
            dataNove.IdParada =  '1' + paradas[0][item].ToString(); 
            tipoParada = await DataTiParTP.ObtenerTipoParadaId(paradas[1][item]);
            dataNove.IdTipoNove = tipoParada.IdTiParTp;
            dataNove.LntiePerMi = double.Parse(paradas[3][item].Replace(".",","));
        }catch(Exception e){
            mensaje = e.Message;
        }

    }

    public async Task eleccionSinGespline(){
        if(tiempoPerdido != 0 && dataNove.IdTipoNove != 0){
        dataNove.IdParada = null;
        dataNove.LntiePerMi = tiempoPerdido;
        tiempoPerdido = 0;
        mensaje = "";
        }else{
            mensaje = "Coloque un tiempo mayor a 0 y una cauda especifica";
        }
    }

    public async Task SinPerdida(){
        dataNove.IdParada = null;
        dataNove.LntiePerMi = -1;
        dataNove.IdTipoNove = 19;
        tiempoPerdido = 0;
        mensaje = "";
    }

    public async Task atras1(){
        usuario = null;
        dataNove = new LibroNove();
        paradas = null;
        dataNove.Lnturno = listaTurnoYGrupo[0];
        dataNove.Lngrupo = listaTurnoYGrupo[1];
    }

    public async Task atras2(){
        dataNove.IdParada = "0";
    }

    public async Task IdMaquina(){
        dataNove.IdEquipo = dataNove.IdMaquina;
    }
    
    //[JSInvokable]
    //public static Task<string> ReturnArrayAsync(string item)
    //{
    //    return Task.FromResult(item);
    //}

    private void Dismissed()
    {
        _buttonDisabled = false;
    }
}

