@page "/FormatoAgrupado/{id:int?}"


@inject IDataPais DataPais;
@inject IDataEmpresa DataEmpresa;
@inject IDataCentro DataCentro;
@inject IDataDivision DataDivision;
@inject IDataLinea DataLinea;
@inject IDataEquipoEAM DataEquipoEAM;
@inject IDataAPI DataAPI;
@inject IDataLibroNov DataLibroNov;
@inject IDataTiParTP DataTiParTP;
@inject IDataClasifiTPM DataClasifiTPM;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@inject NotificationService notificationService


@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.EntityFrameworkCore


<PageTitle>Formato</PageTitle>

@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Libro de Novedades</h1>
        </BSRow>
    </BSContainer>
    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
    
        <BSCard CardType="CardType.Body">
                <BSCard CardType="CardType.Text">
                    @if(!causaCargada){
                        <BSRow> 

                            @if(isAccesoPais){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Pais</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idPais" @onchange="BuscarEmpresas">
                                            @if(listaPais != null){
                                                <option value="0">Seleccione un pais</option>
                                                @foreach (var item in listaPais)
                                                {
                                                    <option value="@item.IdPais">@item.Pnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoEmpresa){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Empresas</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idEmpresa" @onchange="BuscarCentros">
                                            @if(listaEmpresa != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in listaEmpresa)
                                                {
                                                    <option value="@item.IdEmpresa">@item.Enombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoCentro){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Centro</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idCentro" @onchange="BuscarDivisiones">
                                            @if(listaCentro != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in listaCentro)
                                                {
                                                    <option value="@item.IdCentro">@item.Cnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoDivision){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Divisiones</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idDivision" @onchange="BuscarLinea">
                                            @if(listaDivision != null){
                                                <option value="0">Seleccione una division</option>
                                                @foreach (var item in listaDivision)
                                                {
                                                    <option value="@item.IdDivision">@item.Dnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Linea</BSLabel>
                                        <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdLinea" @onchange="BuscarTiempoPerdido">
                                            @if (idDivision != 0)
                                            {   
                                                @if(listaLinea != null){
                                                    <option value="0">Seleccione un Linea</option>
                                                    @foreach (var item in listaLinea)
                                                    {
                                                        <option value="@item.IdLinea">@item.Lnom</option>
                                                    }
                                                }else{
                                                    <option value="0">Cargando...</option>
                                                }
                                            }else{
                                                <option value="0">Seleccione una Divisi√≥n</option>
                                            }
                                        </BSInput>
                            </BSCol>

                            <BSCol class="item" Position="Position.Relative" Align="Align.End"  AlignRow="OTRAlignRow" Place ColumnMedium="4">
                                @if(dataNove.IdLinea != 0){
                                    <BSButton class="buttonFormularioOK" style="margin-right: 10px;"  @onclick=SinPerdida>Sin Perdida De tiempo</BSButton>
                                }
                            </BSCol>
                        </BSRow>  
                        <br>
                        <br>
                        @if((paradasBandera) || (rol.Contains("Mantenimiento"))){
                                        <BSRow>
                                            <BSCol Position="Position.Relative" Place ColumnMedium="5">
                                                @if(rol.Contains("Mantenimiento")){
                                                    <BSLabel class="labelFormularioGrande">Tiempo empleado (min)</BSLabel>
                                                }else{
                                                    <BSLabel class="labelFormularioGrande">Tiempo Perdido (min)</BSLabel>
                                                }
                                                <BSInput InputType="InputType.Number" @bind-Value="tiempoPerdido" rows="1"></BSInput>
                                            </BSCol>
                                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                                <BSLabel class="labelFormulario">Causa</BSLabel>
                                                <BSInput InputType="InputType.Select" @bind-Value="dataNove.IdTipoNove">
                                                    @if(listaTiposNovedad != null){
                                                        <option value="0">Seleccione</option>
                                                        @foreach (var item in listaTiposNovedad)
                                                        {
                                                            <option value="@item.IdTiParTp">@item.Tpnombre</option>
                                                        }
                                                    }else{
                                                        <option value="0">Cargando...</option>
                                                    }
                                                </BSInput>
                                            </BSCol>
                                            <BSCol Position="Position.Relative" Class="AbajoBoton" Place ColumnMedium="3">
                                                <BSButton class="buttonFormularioOK" @onclick="eleccionSinGespline">Seleccionar</BSButton>
                                            </BSCol>
                                        </BSRow>
                        }else{
                            <BSTable IsResponsive="true" IsStriped="true">
                                <BSTHead>
                                    <BSTR class="cabeceraTabla">
                                        <BSTD>#</BSTD>
                                        <BSTD>Secci√≥n</BSTD>
                                        <BSTD>Descripcion</BSTD>
                                        <BSTD>Tiempo (min)</BSTD>
                                        <BSTD>Seleccionar</BSTD>
                                    </BSTR>
                                </BSTHead>
                                <BSTBody class="cuerpoTabla">
                                    @if(paradas == null){
                                        <BSTR>
                                            <BSTD ColSpan="5">Coloque una Linea</BSTD>
                                        </BSTR>
                                    }else{
                                        @foreach (var item in indexParadas)
                                        {
                                            <BSTR>
                                                <BSTD>@(item + 1)</BSTD>
                                                <BSTD>@paradas[4][item]</BSTD>
                                                <BSTD>@paradas[3][item]</BSTD>
                                                <BSTD>@Math.Round(double.Parse(paradas[5][item]),2)</BSTD>
                                                @if(paradas[6][item] == "0"){
                                                    <BSTD><BSButton id="@item"  class="buttonFormularioOK" @onclick="@(e => eleccion(item))">Seleccionar</BSButton></BSTD>
                                                }else if(paradas[6][item] == "1"){
                                                    <BSTD><BSButton id="@item"  class="buttonFormularioCambio" @onclick="@(e => eleccion(item))">Actulizado</BSButton></BSTD>
                                                }else{
                                                    <BSTD><BSButton id="@item"  class="buttonFormularioDLT" @onclick="@(e => eleccion(item))">Por Actualizar</BSButton></BSTD>
                                                }
                                            </BSTR>
                                        }
                                    }
                                </BSTBody>
                            </BSTable>
                        }
                    }else{
                        <BSForm Model="dataNove" IsRow="true" Gutters="Gutters.Medium" OnSubmit="OK">
                            <DataAnnotationsValidator />
                            @if(isAccesoCentro){
                                <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Centro</BSLabel>
                                        <BSInput IsDisabled="true" InputType="InputType.Select" @bind-Value="idCentro"> 
                                            @* @onchange="BuscarLinea" *@
                                            @if(listaCentro != null){
                                                <option value="0">Seleccione un Centro</option>
                                                @foreach (var item in listaCentro)
                                                {
                                                    <option value="@item.IdCentro">@item.Cnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Linea</BSLabel>
                                    <BSInput InputType="InputType.Select" IsDisabled="true" @bind-Value="dataNove.IdLinea" @onchange="BuscarTiempoPerdido">
                                        @if (idCentro != 0)
                                        {   
                                            @if(listaLinea != null){
                                                <option value="0">Seleccione un Linea</option>
                                                @foreach (var item in listaLinea)
                                                {
                                                    <option value="@item.IdLinea">@item.Lnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        }else{
                                            <option value="0">Seleccione un Centro</option>
                                        }
                                    </BSInput>
                                    <BSFeedback For="@(() => dataNove.IdLinea)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Grupo</BSLabel>
                                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                                            TValue="string" Data=@(grupos.Select(c => c.Value))  @bind-Value=dataNove.Lngrupo Style="width: 100%"
                                            Disabled="@isDisableManualGT">
                                    </RadzenDropDown>
                                    <BSFeedback For="@(() => dataNove.Lngrupo)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                    <BSLabel class="labelFormulario">Turno</BSLabel>
                                    <BSInput name="Turno" IsDisabled="@isDisableManualGT"  InputType="InputType.Text" rows="5" @bind-Value="dataNove.Lnturno"></BSInput>
                                    <BSFeedback For="@(() => dataNove.Lnturno)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="6">
                                    <BSLabel class="labelFormularioGrande">Codigo de Equipo</BSLabel>
                                    <RadzenDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true"
                                        TValue="string" Data=listaEquiposEAM LoadData=@LoadData ValueProperty="EcodEquiEam" AllowClear="true" @bind-Value=@dataNove.IdEquipo Style="width: 100%">
                                        <Template Context="item">
                                            @item.EcodEquiEam - @item.EnombreEam -  @item.EdescriEam
                                        </Template>
                                    </RadzenDropDown>
                                    
                            </BSCol>
                            @if(isTPM){
                                @if(isFichaManual){
                                    <BSCol Position="Position.Relative" Place ColumnMedium="4">
                                            <BSLabel class="labelFormularioGrande">Ficha</BSLabel>
                                            <BSInput InputType="InputType.Text" rows="1" @bind-Value="dataNove.LnfichaRes"></BSInput>
                                            <BSFeedback For="@(() => dataNove.LnfichaRes)"/> 
                                    </BSCol>
                                }
                                <BSCol Position="Position.Relative" Place ColumnMedium="5">
                                    <BSLabel class="labelFormulario">Clasificacion TPM</BSLabel>
                                    <BSInput IsDisabled="@isDisableManualCTPM" id="TPM" InputType="InputType.Select" @bind-Value="dataNove.IdCtpm">
                                        @if(listaClasificacionTPM != null){
                                            <option value="0">Seleccione</option>
                                            @foreach (var item in listaClasificacionTPM)
                                            {
                                                <option value="@item.IdCtpm">@item.Ctpmnom</option>
                                            }
                                        }else{
                                            <option value="0">Cargando...</option>
                                        }
                                    </BSInput>
                                    <BSFeedback For="@(() => dataNove.IdCtpm)"/> 
                                </BSCol>
                                
                                <BSCol Position="Position.Relative" Place ColumnMedium="3">
                                        <BSLabel class="labelFormulario">Resuelto</BSLabel>
                                        <BSInput InputType="InputType.Select" @bind-Value="dataNove.LnisResu">
                                            <option value="0">No</option>
                                            <option value="1">Si</option>
                                        </BSInput>
                                        <BSFeedback For="@(() => dataNove.LnisResu)"/> 
                                </BSCol> 
                                
                            }
                            

                            <BSCol Position="Position.Relative" Place ColumnMedium="12">
                                    <BSLabel class="labelFormulario">Discrepancia</BSLabel>
                                    <BSInput class="TextAreaMediano" placeholder="@nota" InputType="InputType.TextArea" rows="5" @bind-Value="dataNove.Lndiscrepa"></BSInput>
                                    <BSFeedback For="@(() => dataNove.Lndiscrepa)"/> 
                            </BSCol>
                            <BSCol Position="Position.Relative" Place ColumnMedium="12">
                                    @if(dataNove.LnisResu == 1){
                                        <BSLabel class="labelFormulario">Acci√≥n</BSLabel>
                                    }else{
                                        <BSLabel class="labelFormulario">Observaci√≥n</BSLabel>
                                    }
                    
                                    <BSInput class="TextAreaMediano" InputType="InputType.TextArea"  rows="5" @bind-Value="dataNove.Lnobserv"></BSInput>
                                    <BSFeedback For="@(() => dataNove.Lnobserv)"/> 
                            </BSCol>
                            <BSCol Column="12">
                                    <BSButton class="buttonFormularioOK" IsDisabled="@isDisabledButton" IsSubmit="true">Registrar</BSButton>
                                    <BSButton class="buttonFormularioDLT"  IsDisabled="@isDisabledButton" @onclick=atras IsReset="true" >Atras</BSButton> 
                            </BSCol>
                        </BSForm>
                    }
                </BSCard>
            
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}
@code{

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    [Parameter]
    public int? id { get; set; }
    private bool _showTooltip;
    private BSAlert _alertRef;
    private string? mensaje { get; set;}  
    private string? nota { get; set;}   
    private string? rol { get; set;} 
    private string? ficha { get; set;} 
    private LibroNove dataNove  { get; set;}
    private TiParTp tipoParada  { get; set;}
    private List<List<string>> paradas { get; set;}
    private List<LibroNove> listaNove { get; set;}
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private int idPais { get; set; }
    private int idEmpresa { get; set; }
    private int idCentro  { get; set;} = 0;
    private int idDivision { get; set; }
    private int idLinea { get; set; }
    private bool isAccesoPais {get;set;}
    private bool isAccesoEmpresa {get;set;}
    private bool isAccesoCentro {get;set;}
    private bool isAccesoDivision {get;set;}
    private bool isAccesoLinea {get;set;}
    private bool isDisableManualCTPM {get;set;}
    private bool isDisableManualGT { get; set;}
    private bool isDisabledButton  { get; set;}
    private bool IsCargado  { get; set;}
    private bool isTPM  { get; set;}
    private bool isFichaManual { get; set;}
    private List<Pai> listaPais {get;set;}    
    private List<Empresa> listaEmpresa {get;set;}
    private List<Centro> listaCentro {get;set;}
    private List<Division> listaDivision {get;set;}
    private List<Linea> listaLinea {get;set;}
    private List<EquipoEam> listaEquiposEAM{ get; set;}
    private List<EquipoEam> listaAllEquiposEAM { get; set;}
    private List<ClasifiTpm> listaClasificacionTPM { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private List<string> listaTurnoYGrupo { get; set;}
    private List<int> indexParadas  { get; set;}
    RadzenDropDown<string> radzenDropDown { get; set;}
    private bool causaCargada { get; set;}
    private bool paradasBandera {get; set;}
    private bool IsNuevo  { get; set;}
    private bool bandera  { get; set;}
    private double tiempoPerdido { get; set;}
    private int indexCambio  { get; set;}
    public (int PAVECA, int CHEMPRO, int PANASA, int PAINSA) empresas = (PAVECA: 1,CHEMPRO: 2, PANASA: 3,PAINSA: 4);
    public readonly Dictionary<string,string> grupoPAVECA = new Dictionary<string, string>{{"GrupoA", "A"}, {"GrupoB", "B"},{"GrupoC", "C"},{"GrupoD", "D"}};
    public readonly Dictionary<string,string> grupoPAINSA = new Dictionary<string, string>{{"Grupo1", "1"}, {"Grupo2", "2"},{"Grupo3", "3"},{"Grupo4", "4"}};
    public readonly Dictionary<string,string> grupoPANASA = new Dictionary<string, string>{{"Grupo1", "-"}};
    public Dictionary<string,string>? grupos = new Dictionary<string, string>();
    //TODO: Pendiente por mejorar private List<LibroNove> listaNoveSinTiempoPerdido { get; set;}
    protected override async Task  OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            AuthenticationState? authState = await authenticationState;
            ClaimsPrincipal? user = authState?.User;


            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                IsCargado = false;
                tiempoPerdido = 0;
                mensaje = "Registre una Novedad";
                Notificacion("info","",mensaje);

                isDisableManualGT = false;
                isTPM = true;
                isDisabledButton = false;
                indexCambio = -1;
                paradasBandera = false;
                isFichaManual = false;

                if(id == id){
                    dataNove = new LibroNove();
                    dataNove.Lnobserv = "";
                    dataNove.Lndiscrepa = "";
                    dataNove.LnisResu = 0;
                    causaCargada = false;
                }else{
                    @* dataNove = await DataLibroNov.ObtenerLibroPorId(id ?? 0) ?? new LibroNove(); *@
                }

                claims = user.Claims;
                rol = user.FindFirst(c => c.Type.Contains("role"))?.Value ?? "";
                idCentro = int.Parse(user.FindFirst(c => c.Type == "IdCentro")?.Value ?? "0");
                idPais = int.Parse(user.FindFirst(c => c.Type == "IdPais")?.Value ?? "0") ;
                idDivision = int.Parse(user.FindFirst(c => c.Type == "IdDivision")?.Value ?? "0") ;
                idEmpresa = int.Parse(user.FindFirst(c => c.Type == "IdEmpresa")?.Value ?? "0") ;
                ficha = user.FindFirst(c => c.Type == "Ficha")?.Value ?? "" ;

                if(ficha == "null"){
                    isFichaManual = true;
                }

                isAccesoPais = false;
                isAccesoEmpresa = false;
                isAccesoCentro = false;
                isAccesoDivision = false;
                isAccesoLinea = false;

                await GrupoTurnoPorEmpresa();
                listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();
                listaClasificacionTPM = await DataClasifiTPM.ObtenerClasificacion();

                if(rol.Contains("SuperAdmin")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    isDisableManualGT = false;
                    dataNove.IdAreaCar = 10;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("SuperUser")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    dataNove.IdAreaCar = 11;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("UserPais")){
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;

                    // Todas las empresas de ese pais con sus centros, divisiones y lineas
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserEmpresa")){
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;

                    // todos los centros,divisiones y lineas de esa empresa
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserCentro")){ 
                    isAccesoDivision = true;
                    isAccesoLinea = true;

                    // todas las divisiones y lineas de ese centro
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserDivision")){
                    isAccesoLinea = true;

                    if(idPais == 1){
                        isAccesoDivision = true;
                        listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    }
                    
                    // todas las lineas de esa division
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }
                

                if(rol.Contains("Calidad")){
                    dataNove.IdAreaCar = 2;
                    isDisableManualCTPM = true;
                    dataNove.IdCtpm = 4; 
                }else if(rol.Contains("Seguridad")){
                    dataNove.IdAreaCar = 3;
                    isDisableManualCTPM = true;
                    dataNove.IdCtpm = 1;
                }else if(rol.Contains("Mantenimiento")){
                    dataNove.IdAreaCar = 4;
                    isDisableManualCTPM = true;
                    dataNove.IdCtpm = 3;
                }else if(rol.Contains("Operaciones")){
                    dataNove.IdAreaCar = 1;
                    isDisableManualCTPM = false;
                    dataNove.IdCtpm = 2; 
                }else if(rol.Contains("Super") || rol.Contains("Admin")){
                    
                }else{
                    mensaje = "Hubo un error por favor inici√© sesi√≥n nuevamente. Si sigue el error contacte a mejora continua";
                    Notificacion("error","",mensaje);
                }
            }
        }
        IsCargado = true;
    }

    protected async Task BuscarEmpresas(ChangeEventArgs e){
        idPais = int.Parse(e.Value.ToString());
        idEmpresa = 0;
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        try{
            if(idPais != 0){
                listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarCentros(ChangeEventArgs e){
        idEmpresa = int.Parse(e.Value.ToString());
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        await GrupoTurnoPorEmpresa();
        try{
            if(idEmpresa != 0){
                listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarDivisiones(ChangeEventArgs e){
        idCentro = int.Parse(e.Value.ToString());
        idDivision = 0;
        idLinea = 0;
        try{
            if(idCentro != 0){
                listaDivision= await DataDivision.ObtenerDivisionDelCentro(idCentro);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarLinea(ChangeEventArgs e){
        idDivision = int.Parse(e.Value.ToString());
        idLinea = 0;
        dataNove.IdLinea = 0;
        try{
            if(idCentro != 0){
                listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarLineaPorCentro(ChangeEventArgs e){
        idCentro = int.Parse(e.Value.ToString());
        try{
            if(idCentro != 0){
                listaLinea = await DataLinea.ObtenerLasLineasPorCentro(idCentro);
            }else{
                dataNove.IdLinea = 0;
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    

    protected async Task OK(EditContext e){
        isDisabledButton = true;
        dataNove.Lnfecha = DateTime.Now;
        if(ficha != "null"){
            dataNove.LnfichaRes = ficha;
        }
        if (e.Validate())
        {
            dataNove.Lnobserv = dataNove.Lnobserv.Trim();
            if((dataNove.LnisResu == 1 && dataNove.Lnobserv != "") || dataNove.LnisResu != 1){
                
                dataNove.LnfichaRes = dataNove.LnfichaRes.ToUpper();
                dataNove.IdEquipo = dataNove.IdEquipo.Trim().ToUpper();
                dataNove.Lndiscrepa = dataNove.Lndiscrepa.Trim();
                dataNove.LntiePerMi = Math.Round(dataNove.LntiePerMi,5);
                dataNove.Lndiscrepa =  dataNove.Lndiscrepa.ToUpper();
                dataNove.Lnobserv =  dataNove.Lnobserv.ToLower();

                try
                {
                    if(IsNuevo){
                        bandera = await DataLibroNov.InsertarRegistro(dataNove);
                    }else{
                        bandera = await  DataLibroNov.ActualizacionCompleta(dataNove.IdlibrNov,dataNove);
                    }

                    if(bandera){
                        mensaje = "Guardado Exitosamente";
                        Notificacion("exito","",mensaje);
                        nota = "";
                        int d1 = dataNove.IdAreaCar;
                        int d2 =  dataNove.IdLinea;
                        string d4 = dataNove.LnfichaRes;
                        string d5 = dataNove.IdMaquina;
                        int d6 = dataNove.IdCtpm ?? 0;

                        if(indexCambio != -1){
                            paradas[6][indexCambio] = "1";
                        }
                            
                        dataNove = new LibroNove();
                        listaEquiposEAM = listaAllEquiposEAM.ToList();
                        InvokeAsync(StateHasChanged);

                        if(!isTPM){ 
                            dataNove.IdCtpm = 5;
                            dataNove.LnisResu = 2;
                        }
                        
                        dataNove.LnisResu = 0;
                        dataNove.IdAreaCar = d1;
                        dataNove.IdLinea = d2;
                        dataNove.LnfichaRes = d4;
                        dataNove.IdMaquina = d5;
                        causaCargada = false;
                        GrupoTurno();
                        dataNove.IdCtpm = d6;
                        indexCambio = -1;
                    }else{
                        mensaje = "Error. Intente de nuevo";
                        Notificacion("error","",mensaje);
                    }
                }
                catch (Microsoft.EntityFrameworkCore.DbUpdateException a)
                {
                    mensaje = "Error: " + a.Message;
                    Notificacion("error","",mensaje);
                }
                catch(Exception ex){
                    mensaje = "Error: " + ex.Message;
                    Notificacion("error","",mensaje);
                }
            }else{
                mensaje = "La descripci√≥n de la acci√≥n tomada es obligatoria";
                Notificacion("error","",mensaje);
            }
        }else{
            mensaje = "Campo vac√≠o, por favor revisa todo el formulario";
            Notificacion("error","",mensaje);
        }
        isDisabledButton = false;
        _showTooltip = true;
    }

    protected async Task BuscarTiempoPerdido(ChangeEventArgs e){
        try{
            Linea linea;
            string temporal;
            List<string> listaDeEstado;
            LibroNove? dataNov;
            double parada;

            dataNove.IdLinea = int.Parse(e.Value.ToString());
            listaEquiposEAM = await DataEquipoEAM.BuscarEquiposSegunLinea(dataNove.IdLinea);
            listaAllEquiposEAM = await DataEquipoEAM.BuscarEquiposSegunLinea(dataNove.IdLinea);
            linea =  listaLinea.Where(l => l.IdLinea == int.Parse(e.Value.ToString())).FirstOrDefault();
            dataNove.IdMaquina = linea.Lofic;
            listaNove = await DataLibroNov.RegistroDeHoyPorLinea(dataNove.IdLinea);
            // TODO: pendinete para mejorar listaNoveSinTiempoPerdido = listaNove.Where(n => n.LntiePerMi == -1).ToList();
            paradas = await DataAPI.obtenerParadasActualesturnoPorLineaAgrupadas(linea.LcenCos);
            listaDeEstado = new List<string>();
            
            for (int i = 0; i < paradas[0].Count; i++)
            {
                temporal = paradas[0][i] + "-" + paradas[1][i] + "-" + paradas[2][i] + "-" +  DateTime.Now.ToString("ddMMyyyy") + "-" + listaTurnoYGrupo[0] + listaTurnoYGrupo[1];
                dataNov = listaNove.Where(n => n.IdParada == temporal).FirstOrDefault();
                if(dataNov == null){
                    listaDeEstado.Add("0");
                    continue;
                }else{
                    parada = Math.Round(double.Parse(paradas[5][i]),5);
                    if(dataNov.LntiePerMi == parada){
                        listaDeEstado.Add("1");
                    }else{
                        listaDeEstado.Add("2");
                    }
                }
            }
            paradas.Add(listaDeEstado);

            if(paradas.Count != 0){
                if(paradas[0].Count == 0){
                    paradasBandera = true;
                    indexParadas = new List<int>();
                }else{
                    paradasBandera = false;
                    indexParadas = new List<int>(paradas[0].Count());
                    for (int i = 0; i < indexParadas.Capacity; i++){  indexParadas.Add(i); }
                }
            }else{
                paradasBandera = true;
                indexParadas = new List<int>();
            }
        }catch(Exception ex){
            if(ex.Message.Contains("Response status code does not indicate success: 500 (Internal Server Error).")){
                mensaje = "Error al consultar al gespline.";
                Notificacion("error","",mensaje);
                paradasBandera = true;
            }else{
                mensaje = "Error: " + ex.Message;
                Notificacion("error","",mensaje);
            }
        }
    }
    public async Task eleccion(int item){
        try{
            string temporal;
            LibroNove data;

            indexCambio = item;
            temporal = paradas[0][item] + "-" + paradas[1][item] + "-" + paradas[2][item] + "-" +  DateTime.Now.ToString("ddMMyyyy") + "-" + listaTurnoYGrupo[0] + listaTurnoYGrupo[1];
            data = await DataLibroNov.ObtenerPorIdParada(temporal);

            if(data == null){
                tipoParada = await DataTiParTP.ObtenerTipoParadaId(paradas[1][item]);
                dataNove.IdTipoNove = tipoParada.IdTiParTp;
                dataNove.LntiePerMi = Math.Round(double.Parse(paradas[5][item]),5);
                GrupoTurno();
                dataNove.IdEquipo = "";
                dataNove.Lnobserv = "";
                nota = "Nota: " + paradas[4][item] + " - " + paradas[3][item];;
                dataNove.Lndiscrepa = "";
                dataNove.IdParada =  temporal;
                IsNuevo = true;
                dataNove.IdCtpm = 2;
            }else{
                dataNove.IdLinea = data.IdLinea;
                dataNove.IdAreaCar = data.IdAreaCar;
                dataNove.IdEquipo = data.IdEquipo;
                dataNove.IdlibrNov =  data.IdlibrNov;
                dataNove.IdMaquina = data.IdMaquina;
                dataNove.IdParada = data.IdParada;
                dataNove.IdTipoNove = data.IdTipoNove;
                dataNove.Lndiscrepa = data.Lndiscrepa;
                dataNove.Lnfecha = data.Lnfecha;
                dataNove.LnfichaRes = data.LnfichaRes;
                dataNove.Lngrupo = data.Lngrupo;
                dataNove.LnisPizUni = data.LnisPizUni;
                dataNove.Lnobserv = data.Lnobserv;
                dataNove.LntiePerMi = Math.Round(double.Parse(paradas[5][item]),5);
                dataNove.Lnturno = data.Lnturno;
                dataNove.IdCtpm = data.IdCtpm;
                dataNove.LnisResu = data.LnisResu;
                IsNuevo = false;
            }
            causaCargada = true;
        }catch(Exception e){
            mensaje = "Error: " + e.Message;
            Notificacion("error","",mensaje);
        }
    }

    public async Task eleccionSinGespline(){
        try{
            GrupoTurno();
            IsNuevo = true;
            if(tiempoPerdido > 0 && dataNove.IdTipoNove != 0){
                dataNove.Lnobserv = "";
                dataNove.IdParada = null;
                causaCargada = true;
                dataNove.Lndiscrepa = "";
                dataNove.LntiePerMi = tiempoPerdido;
                nota = "";
                tiempoPerdido = 0;
                mensaje = "";
            }else{
                mensaje = "Coloque un tiempo mayor a 0 y una causa especifica";
                Notificacion("error","",mensaje);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    public async Task SinPerdida(){
        IsNuevo = true;
        GrupoTurno();
        dataNove.IdParada = null;
        causaCargada = true;
        dataNove.Lndiscrepa = "";
        dataNove.Lnobserv = "";
        dataNove.IdEquipo = "";
        dataNove.LntiePerMi = -1;
        dataNove.IdTipoNove = 19;
        tiempoPerdido = 0;
        mensaje = "";
        nota = "";
    }

    public void GrupoTurno(){
        if(idEmpresa == empresas.PAVECA){
            dataNove.Lnturno = listaTurnoYGrupo[0];
            dataNove.Lngrupo = listaTurnoYGrupo[1];
        }
    }

    public async Task atras(){
        causaCargada = false;
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion;
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }
    } 

    public async Task GrupoTurnoPorEmpresa(){
        if(idEmpresa == empresas.PAVECA){
            listaTurnoYGrupo = await DataAPI.ObtenerTurnoYGrupo();
            if(!rol.Contains("Admin")){
                isDisableManualGT = true;
            }
            grupos = new Dictionary<string,string>(grupoPAVECA);
        }else if(idEmpresa == empresas.PANASA){
            grupos = new Dictionary<string,string>(grupoPANASA);
            dataNove.Lngrupo = "-";
        }else if(idEmpresa == empresas.PAINSA){
            grupos = new Dictionary<string,string>(grupoPAINSA);
        }else if(idEmpresa == empresas.CHEMPRO){
            grupos = new Dictionary<string,string>(grupoPAVECA);
        }
    }
    void LoadData(LoadDataArgs args)
    {

        if (!string.IsNullOrEmpty(args.Filter))
        {
            listaEquiposEAM = listaAllEquiposEAM.Where(c => c.EcodEquiEam.ToLower().Contains(args.Filter.ToLower()) || c.EnombreEam.ToLower().Contains(args.Filter.ToLower())).ToList();
            InvokeAsync(StateHasChanged);
        }
        if(args.Filter == ""){
            listaEquiposEAM = listaAllEquiposEAM.ToList();
            InvokeAsync(StateHasChanged);
        }
    }
}



