@inherits LayoutComponentBase
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IDataAPI DataAPI

@inject IDataUser DataUser
@inject IDataNivel DataNivel
@inject IDataProyectoUsr DataProyectoUsr

@inject NotificationService NotificationService


<PageTitle>LibroNovedades</PageTitle>

<div class="page">
    <AuthorizeView>
        <Authorized>

            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4 cabeza">
                    <h5 style="text-align: start;">
                    </h5>
                    <BSButton Color="BSColor.Success" IsOutlined="true" @onclick="logout">Logout</BSButton>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </Authorized>

        <NotAuthorized>
            <main>
                <div class="text-center fondo">
                    <RadzenTemplateForm Context="radzen" Data="@userDto" class="form-signin w-25 m-auto loginform ">

                        <img class="mb-4" id="logoLogin" src="./img/Neo.png">
                        <h1 class="h3 mb-3 fw-normal">Inicie Sesión</h1>

                        <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Usuario</RadzenText>
                        <RadzenTextBox Placeholder="Usuario" Name="usuario" id="usuario"  @bind-Value="usuario" class="w-100" />
                        
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="pt-4" TagName="TagName.H3">Contraseña</RadzenText>
                        <RadzenPassword @bind-Value=@contrasena Name="contraseña" id="contraseña" Placeholder="Contraseña..."  class="w-100"/>

                        <RadzenButton class="mt-4" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Disabled="@isDisabled" Text="Registrar" ButtonStyle="ButtonStyle.Success" Click=login/>
                    </RadzenTemplateForm>
                </div>
            
            </main>
        </NotAuthorized>
    </AuthorizeView> 
    <RadzenNotification />
</div>

@code {

    private string? mensaje { get; set;} = "Bienvenido";
    private bool isDisabled  { get; set;} = false;
    private string proyecto { get; set;} = "";
    private string usuario {get; set;} = "";
    private string contrasena {get; set;} = "";
    private UserLoginDto userDto {get; set;}
    private HttpResponseMessage result {get; set;}
    private string validarToken  {get; set;}

    protected override async Task  OnInitializedAsync()
    {
        proyecto = "LibroDeNovedades";
        userDto = new UserLoginDto() ;
    }
    protected async Task logout(){
        usuario = "";
        contrasena = "";
        await LocalStorage.RemoveItemAsync("LibroDeNovedadesNew");
        await AuthStateProvider.GetAuthenticationStateAsync();
    }

    protected async Task login(){
        isDisabled = true;
        mensaje = "Cargando...";
        Notificacion("info","",mensaje);
        if (usuario.Trim() != "" && contrasena.Trim() != "")
        {
            userDto.Proyecto = proyecto;
            userDto.UserName = usuario;
            userDto.Password = contrasena;
            result = await Http.PostAsJsonAsync("http://neo.paveca.com.ve/Authentication/api/Auth/Login", userDto);
            validarToken = await result.Content.ReadAsStringAsync();
            if (validarToken != null)
            {
                if (validarToken == "NotFoundUser")
                {
                    mensaje = "Verifique el usuario";
                    Notificacion("error","",mensaje);
                }
                else if (validarToken == "WrongPassword")
                {
                    mensaje = "Verifique la contraseña";
                    Notificacion("error","",mensaje);
                }
                else if (validarToken == "null")
                {
                    mensaje = "Verifique el usuario";
                    Notificacion("error","",mensaje);
                }
                else
                {
                    await LocalStorage.SetItemAsync("LibroDeNovedadesNew", validarToken);
                    await AuthStateProvider.GetAuthenticationStateAsync();    
                    NavigationManager.NavigateTo("");
                    mensaje = "Bienvenido";
                    Notificacion("exito","",mensaje);
                }
            }else{
                mensaje = "Hubo un error. Por favor intende de nuevo";
                Notificacion("error","",mensaje);
            }
        }else{
            mensaje = "Ingrese un usuario, contraseña valida y ficha valida";
            Notificacion("error","",mensaje);
        }
        isDisabled = false;
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion = new NotificationMessage{};
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
        }
        NotificationService.Notify(notificacion);
    } 
}