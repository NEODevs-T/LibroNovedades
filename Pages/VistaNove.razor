@page "/Historico"

@inject IDataPais DataPais;
@inject IDataEmpresa DataEmpresa;
@inject IDataCentro DataCentro;
@inject IDataDivision DataDivision;
@inject IDataLinea DataLinea;
@inject IDataEquipoEAM DataEquipoEAM;
@inject IDataAPI DataAPI;
@inject IDataLibroNov DataLibroNov;
@inject IDataTiParTP DataTiParTP;
@inject IDataClasifiTPM DataClasifiTPM;
@inject ILogicLibroNov LogicLibroNov;

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@inject NotificationService notificationService

@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Historico</PageTitle>
@if(IsCargado){
    <BSContainer PaddingBottom="Padding.Large">
        <BSRow>
            <h1 class="titulo">Historico</h1>
        </BSRow>
    </BSContainer>

    <BSCard CardType="CardType.Card" style="width: 90%;" MarginBottom="Margins.Large">
            <BSCard CardType="CardType.Body">

                <BSCard CardType="CardType.Text">
                    
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Desde</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFechaInicio"></BSInput>
                        </BSCol>
                        <BSCol Position="Position.Relative" Place ColumnMedium="3">
                            <BSLabel class="labelFormulario">Hasta</BSLabel>
                            <BSInput BSInput InputType="InputType.Date" rows="1" @bind-Value="filtroFechaFinal"></BSInput>
                        </BSCol>
                    </BSRow>
                    <br>
                    <BSRow>
                        @* <BSCol class="item" Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Tipo de Novedad</BSLabel>
                                <BSInput  InputType="InputType.Select" @onchange="CambioTN" @bind-Value="filtroTipoNovedad">
                                    <option value="0">Todas</option>
                                    @if (listaTiposNovedad != null)
                                    {
                                        @foreach (var item in listaTiposNovedad)
                                        {
                                            <option value="@item.IdTiParTp">@item.Tpnombre.ToUpper()</option>
                                        }  
                                    }
                                </BSInput>
                        </BSCol> *@
                        <BSCol class="item" Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Estado</BSLabel>
                                <BSInput  InputType="InputType.Select" @bind-Value="filtroIsResuelto">
                                    <option value="2">Todos</option>
                                    <option value="0">Sin resolver</option>
                                    <option value="1">Resueltos</option>
                                </BSInput>
                        </BSCol>

                        <BSCol class="item" Position="Position.Relative" Place ColumnMedium="5">
                            <BSLabel class="labelFormulario">Clasificacion TPM</BSLabel>
                                <BSInput  InputType="InputType.Select" IsDisabled="@IsDisableFTPM" @bind-Value="filtroClasificacionTPM">
                                    <option value="0">Todas</option>
                                    @if (listaClasificacionTPM != null)
                                    {
                                        @foreach (var item in listaClasificacionTPM)
                                        {
                                            <option value="@item.IdCtpm">@item.Ctpmnom.ToUpper()</option>
                                        }  
                                    }
                                </BSInput>
                        </BSCol>

                        @if(isAccesoPais){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Pais</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idPais" @onchange="BuscarEmpresas">
                                            <option value="0">Seleccione</option>
                                            @if(listaPais != null){
                                                @foreach (var item in listaPais)
                                                {
                                                    <option value="@item.IdPais">@item.Pnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoEmpresa){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Empresas</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idEmpresa" @onchange="BuscarCentros">
                                            <option value="0">Seleccione</option>
                                            @if(listaEmpresa != null){
                                                @foreach (var item in listaEmpresa)
                                                {
                                                    <option value="@item.IdEmpresa">@item.Enombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoCentro){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Centro</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idCentro" @onchange="BuscarDivisiones">
                                            <option value="0">Seleccione</option>
                                            @if(listaCentro != null){
                                                @foreach (var item in listaCentro)
                                                {
                                                    <option value="@item.IdCentro">@item.Cnom</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            @if(isAccesoDivision){
                                <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Divisiones</BSLabel>
                                        <BSInput IsDisabled="false" InputType="InputType.Select" @bind-Value="idDivision" @onchange="BuscarLinea">
                                            @if(listaDivision != null){
                                                <option value="0">Todas</option>
                                                @foreach (var item in listaDivision)
                                                {
                                                    <option value="@item.IdDivision">@item.Dnombre</option>
                                                }
                                            }else{
                                                <option value="0">Cargando...</option>
                                            }
                                        </BSInput>
                                </BSCol>
                            }

                            <BSCol class="item" Position="Position.Relative" Place ColumnMedium="4">
                                        <BSLabel class="labelFormulario">Linea</BSLabel>
                                        <BSInput InputType="InputType.Select" @bind-Value="filtroLinea">
                                            @if (idDivision != 0)
                                            {   
                                                @if(listaLinea != null){
                                                    <option value="0">Todas</option>
                                                    @foreach (var item in listaLinea)
                                                    {
                                                        <option value="@item.IdLinea">@item.Lnom</option>
                                                    }
                                                }else{
                                                    <option value="0">Cargando...</option>
                                                }
                                            }else{
                                                <option value="0">Seleccione una División</option>
                                            }
                                        </BSInput>
                            </BSCol>
                        
                    </BSRow> 
                    <br>
                    <BSRow>
                        <BSCol Position="Position.Relative" Place ColumnMedium="4">
                            <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled"  @onclick="buscar">Buscar</BSButton>
                        </BSCol>
                    </BSRow>
                    @if (listaNovedades != null)
                    {
                        <br>
                        <br>
                        <BSTable IsResponsive="true" IsStriped="true">
                            <BSTHead>
                                <BSTR class="cabeceraTabla">
                                    <BSTD>#</BSTD>
                                    <BSTD>Linea</BSTD>
                                    <BSTD>Fecha</BSTD>
                                    <BSTD>Codigo de Equipo</BSTD>
                                    <BSTD>Grupo</BSTD>
                                    <BSTD>Turno</BSTD>
                                    <BSTD>Tiempo Perdido (min)</BSTD>
                                    <BSTD>Discrepancia</BSTD>
                                    <BSTD>Area cargador</BSTD>
                                    <BSTD>Estado</BSTD>
                                    @if(IsAccesoCambioEstado){
                                        <BSTD>Cambio de estado</BSTD>
                                    }
                                    
                                    @if(IsAccesoPizarra){
                                        <BSTD>Pizarra Unificada</BSTD>
                                    }
                                </BSTR>
                            </BSTHead>
                            <BSTBody class="cuerpoTabla">
                                @foreach (var item in listaNovedades){
                                    <BSTR>
                                        <BSTD>@(listaNovedades.IndexOf(item) + 1)</BSTD>
                                        <BSTD>@item.IdLineaNavigation.Lnom</BSTD>
                                        <BSTD>@item.Lnfecha.ToString("dd/MM/yyyy")</BSTD>
                                        <BSTD>@item.IdEquipo</BSTD>
                                        <BSTD>@item.Lngrupo</BSTD>
                                        <BSTD>@item.Lnturno</BSTD>
                                        @if(item.LntiePerMi == -1){
                                            <BSTD>0</BSTD> 
                                        }else if(item.LntiePerMi.ToString().Count() < 5){
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",")</BSTD> 
                                        }else{
                                            <BSTD>@item.LntiePerMi.ToString().Replace(".",",").Substring(0,5)</BSTD> 
                                        }
                                        <BSTD>@item.Lndiscrepa</BSTD>
                                        <BSTD>@item.IdAreaCarNavigation.Acnombre</BSTD>
                                        
                                        <BSTD>
                                            @if(item.LnisResu == 1){
                                                <p>Resuelto</p>
                                            }else if(item.LnisResu == 0){
                                                <p>Sin Resolver</p>
                                            }else{
                                                <p> - </p>
                                            }
                                        </BSTD>
                                        
                                        @if(IsAccesoCambioEstado){
                                            <BSTD>
                                                @if(item.LnisResu == 1){
                                                    <div>
                                                        <RadzenButton Disabled="@isDisabled" Click=@(() => Edicion(item.IdlibrNov)) class="rz-background-color-white" Image="./icon/Sync.png" ButtonStyle="ButtonStyle.Light" />
                                                        @* <BSButton class="buttonFormularioCambio" IsDisabled="@isDisabled" @onclick=@(() => Edicion(item.IdlibrNov)) IsSubmit="true">Editar</BSButton> *@
                                                    </div>
                                                }else if(item.LnisResu == 0){
                                                    <div>
                                                        <RadzenButton Disabled="@isDisabled" Click=@(() => Edicion(item.IdlibrNov)) class="rz-background-color-white" Image="./icon/Sync.png" ButtonStyle="ButtonStyle.Light" />
                                                        @* <BSButton class="buttonFormularioCambio" IsDisabled="@isDisabled" @onclick=@(() => Edicion(item.IdlibrNov)) IsSubmit="true">Editar</BSButton> *@
                                                    </div>
                                                }else{
                                                    <p> - </p>
                                                }
                                            </BSTD>
                                        }
                                        @if(IsAccesoPizarra){
                                            <BSTD>
                                                <div >
                                                    <BSInputCheckbox Size="Size.ExtraLarge" CheckedValue="true" UnCheckedValue="false" @bind-Value="item.LnisPizUni"/>
                                                </div>
                                            </BSTD>
                                        }
                                    </BSTR>
                                    
                                }
                            </BSTBody>
                        </BSTable>
                        <BSRow>
                            <BSCol Column="12">
                                @if(IsAccesoPizarra){
                                    <BSButton class="buttonFormularioOK" IsDisabled="@isDisabled" @onclick=Guardar IsSubmit="true">Registrar</BSButton>
                                }
                            </BSCol>
                        </BSRow>
                    }
                
                </BSCard>
        </BSCard>
    </BSCard>
}else{
    <BSRow class="carga" Justify="Justify.Center">
        <BSCol Column="3">
        <div class="loader"></div>
        </BSCol>  
    </BSRow>
}



@code{

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private DateTime filtroFechaInicio { get; set;}
    private DateTime filtroFechaFinal { get; set;}
    private int filtroTipoNovedad { get; set;} = 0;
    private int filtroIsResuelto { get; set;} = 2;
    private int filtroClasificacionTPM { get; set;}
    private int filtroLinea { get; set;}
    private bool isAccesoPais {get;set;}
    private bool isAccesoEmpresa {get;set;}
    private bool isAccesoCentro {get;set;}
    private bool isAccesoDivision {get;set;}
    private bool isAccesoLinea {get;set;}
    private bool IsAccesoPizarra  { get; set;}
    private bool IsAccesoCambioEstado  { get; set;}
    private bool IsCargado  { get; set;}
    private bool isDisabled  { get; set;}
    private bool band1  { get; set;}
    private bool band2  { get; set;}
    private bool IsDisableFTPM { get; set;}
    private string? rol { get; set;}
    private string mensaje { get; set;}
    private List<Pai> listaPais {get;set;} 
    private List<Empresa> listaEmpresa {get;set;}
    private List<Centro> listaCentro {get;set;}
    private List<Division> listaDivision {get;set;}
    private List<Linea> listaLinea {get;set;}
    private List<LibroNove> listaNovedades { get; set;}
    private List<TiParTp> listaTiposNovedad { get; set;}
    private List<ClasifiTpm> listaClasificacionTPM { get; set;}
    private LibroNove dataNove {get; set;}
    private int idPais { get; set; }
    private int idEmpresa { get; set; }
    private int idCentro  { get; set;}
    private int idDivision { get; set; }
    private int idLinea { get; set; }
    private int idAreCargada { get; set;}

    private BSAlert _alertRef { get; set;}
    private string nombre  { get; set;}
    private string apellido  { get; set;}
    protected override async Task  OnInitializedAsync()
    {
        IsCargado = false;
        if (authenticationState is not null){

            AuthenticationState? authState = await authenticationState;
            ClaimsPrincipal? user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                mensaje = "Historico de registro de las novedades";
                Notificacion("info","",mensaje);

                isDisabled = false;
                idAreCargada = 0;
                IsAccesoPizarra = false;
                IsAccesoCambioEstado = false;
                IsDisableFTPM = true;
                filtroFechaInicio = DateTime.Now.Date;
                filtroFechaFinal = DateTime.Now.Date;

                rol = user.FindFirst(c => c.Type.Contains("role"))?.Value ?? "";
                nombre = user.FindFirst(c => c.Type.Contains("givenname"))?.Value ?? "";
                apellido = user.FindFirst(c => c.Type.Contains("surname"))?.Value ?? "";
                idCentro = int.Parse(user.FindFirst(c => c.Type == "IdCentro")?.Value ?? "0");
                idPais = int.Parse(user.FindFirst(c => c.Type == "IdPais")?.Value ?? "0") ;
                idDivision = int.Parse(user.FindFirst(c => c.Type == "IdDivision")?.Value ?? "0") ;
                idEmpresa = int.Parse(user.FindFirst(c => c.Type == "IdEmpresa")?.Value ?? "0") ;
                isAccesoPais = false;
                isAccesoEmpresa = false;
                isAccesoCentro = false;
                isAccesoDivision = false;
                isAccesoLinea = false;

                listaTiposNovedad = await DataTiParTP.ObtenerTodosTiposNovedad();
                listaClasificacionTPM = await DataClasifiTPM.ObtenerClasificacion();

                if(rol.Contains("SuperAdmin")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoPizarra = true;
                    IsAccesoCambioEstado = true;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("SuperUser")){
                    isAccesoPais = true;
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoPizarra = true;
                    IsAccesoCambioEstado = true;
                    
                    // Todos los paises con todas las empresas centros, divisiones y lineas
                    listaPais = await DataPais.ObtenerTodosLosPaises();
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);

                }else if(rol.Contains("UserPais")){
                    isAccesoEmpresa = true;
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoCambioEstado = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }

                    // Todas las empresas de ese pais con sus centros, divisiones y lineas
                    listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserEmpresa")){
                    isAccesoCentro = true;
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoCambioEstado = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }

                    // todos los centros,divisiones y lineas de esa empresa
                    listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserCentro")){ 
                    isAccesoDivision = true;
                    isAccesoLinea = true;
                    IsAccesoCambioEstado = true;
                    if(rol.Contains("Operaciones")){
                        IsAccesoPizarra = true;
                    }
                    // todas las divisiones y lineas de ese centro
                    listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }else if(rol.Contains("UserDivision")){
                    isAccesoLinea = true;
                    // todas las lineas de esa division
                    if(idPais == 1){
                        isAccesoDivision = true;
                        listaDivision = await DataDivision.ObtenerDivisionDelCentro(idCentro);
                    }

                    listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
                }


                if(rol.Contains("Calidad")){
                    idAreCargada = 2;
                    filtroClasificacionTPM = 4;
                }else if(rol.Contains("Seguridad")){
                    idAreCargada = 3;
                    filtroClasificacionTPM = 1;
                }else if(rol.Contains("Mantenimiento")){
                    idAreCargada = 4;
                    filtroClasificacionTPM = 3;
                }else if(rol.Contains("Operaciones")){
                    idAreCargada = 1;
                    IsDisableFTPM = false;
                }else if(rol.Contains("Admin") || rol.Contains("Super")){
                    IsDisableFTPM = false;
                    idAreCargada = 10;
                }
            }else{
                mensaje = "Sin Acceso";
                Notificacion("info","",mensaje);
            }
        }
        IsCargado = true;
    }

    protected async Task BuscarEmpresas(ChangeEventArgs e){
        idPais = int.Parse(e.Value.ToString());
        idEmpresa = 0;
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        try{
            if(idPais != 0){
                listaEmpresa = await DataEmpresa.ObtenerEmpresasPorPaies(idPais);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarCentros(ChangeEventArgs e){
        idEmpresa = int.Parse(e.Value.ToString());
        idCentro = 0;
        idDivision = 0;
        idLinea = 0;
        try{
            if(idEmpresa != 0){
                listaCentro = await DataCentro.ObtenerCentrosPorEmpresa(idEmpresa);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarDivisiones(ChangeEventArgs e){
        idCentro = int.Parse(e.Value.ToString());
        idDivision = 0;
        idLinea = 0;
        try{
            if(idCentro != 0){
                listaDivision= await DataDivision.ObtenerDivisionDelCentro(idCentro);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    protected async Task BuscarLinea(ChangeEventArgs e){
        idDivision = int.Parse(e.Value.ToString());
        idLinea = 0;
        filtroLinea = 0;
        try{
            if(idCentro != 0){
                listaLinea = await DataLinea.ObtenerLasLineasPorDivision(idDivision);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }



    protected async Task buscar(){
        try{
            if(filtroFechaInicio.Date == filtroFechaFinal.Date) {
                listaNovedades = null;
                listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltro(idCentro,filtroFechaInicio,idDivision,filtroLinea,filtroClasificacionTPM,filtroIsResuelto);
            }else if(filtroFechaInicio.Date < filtroFechaFinal.Date){
                listaNovedades = null;
                listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltroEntreFechas(idCentro,filtroFechaInicio,filtroFechaFinal,idDivision,filtroLinea,filtroClasificacionTPM,filtroIsResuelto);
            }else{
                listaNovedades = null;
                listaNovedades = await DataLibroNov.ObtenerLibroNovedadesPorFiltroEntreFechas(idCentro,filtroFechaInicio,filtroFechaFinal,idDivision,filtroLinea,filtroClasificacionTPM,filtroIsResuelto);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
    }

    public async Task Edicion(int idLibroNov){
        bool band;
        int indexLista;
        //NavigationManager.NavigateTo($"/FormatoAgrupado/{idLibroNov}");
        try{
            dataNove = listaNovedades.Where(x => x.IdlibrNov == idLibroNov).First();
            if((dataNove.Lnfecha.AddDays(1) > DateTime.Now) || ((DateTime.Now.DayOfWeek.ToString() == "Monday") && (dataNove.Lnfecha.AddDays(3) > DateTime.Now))){
                dataNove.LnisResu = dataNove.LnisResu == 1 ?  dataNove.LnisResu = 0 : dataNove.LnisResu = 1;
                band = await DataLibroNov.ActualizacionEstado(idLibroNov,dataNove);
                if(band){
                    indexLista = listaNovedades.IndexOf(dataNove);
                    listaNovedades[indexLista] = dataNove;
                    Notificacion("exito","","El cambio fue exitoso");
                }else{
                    Notificacion("error","Error: ","Intente de Nuevo. Si el problema persiste enviar un correo a Mejora Continua");
                }
            }else{
                Notificacion("info","Error: ","La discrepancia de las novedades ya cumplió 24 horas, no se puede cambiar el estado de esta novedad");
            }
        }catch(Exception e){
            Notificacion("info","Error: ","La discrepancia de las novedades ya cumplió 24 horas, no se puede cambiar el estado de esta novedad");
        }
    }

    protected async Task Guardar(){
        isDisabled = true;
        List<LibroNove> listaFiltrada = new List<LibroNove>();

        try{
            mensaje = "";
            (band1,listaFiltrada) = await LogicLibroNov.CambiosBDLibro(idPais,idEmpresa,idCentro,idDivision,listaNovedades,filtroFechaInicio,filtroFechaFinal,filtroLinea,filtroClasificacionTPM,nombre + " " + apellido);
            if(band1){
                band2 = await DataLibroNov.UpdateRegistros(listaFiltrada);
                if(band2){
                    mensaje = "Se realizo de manera exitosa";
                    Notificacion("exito","",mensaje);
                }else{
                    mensaje = "Falla en la actualizacion en el libro de novedades, la data fue registrada en la pizarra unificada";
                    Notificacion("info","",mensaje);
                }
            }else{
                mensaje = "No se encontró ningún dato valido para registrar al libro de novedades. Recuerde que las actividades resueltas no pueden ser enviadas a la Pizarra, además no podrá enviar actividades que ya se cargaron anteriormente.";
                Notificacion("info","",mensaje);
            }
        }catch(Exception ex){
            mensaje = "Error: " + ex.Message;
            Notificacion("error","",mensaje);
        }
        isDisabled = false;
    }

    public void Notificacion(string tipo,string mensaje,string detalle)
    {

        NotificationMessage notificacion;
        if(tipo == "error"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "info"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "exito"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }else if(tipo == "advertencia"){
            notificacion = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = mensaje, Detail = detalle, Duration = 8000 };
            notificationService.Notify(notificacion);
        }
    }
}
